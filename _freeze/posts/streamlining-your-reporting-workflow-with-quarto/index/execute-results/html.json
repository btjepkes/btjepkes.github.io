{
  "hash": "4806c96de108b6410a220f2e0de408fc",
  "result": {
    "markdown": "---\ntitle: \"Streamlining Your Reporting Workflow with Quarto\"\nsubtitle: \"Manually updating reports is old news, start producing reproducible documents.\"\ndate: \"5/28/2023\"\nabstract: In this post, we talk about how to make your reporting workflows much easier by using reproducible formats. We run through an example, using birdfeeder visitation data from FeederWatch, on parameterizing reports using Quarto in the RStudio environment.\nabstract-title: \"\"\ncategories:\n  - R\n  - Quarto\n  - Reporting\nimage: bg-pine-blue.jpg\ndraft: FALSE\naliases: \n  - /posts/post-two.html\n---\n\n\n## Background\n\n### Learning Outcomes\n\nIn today's data-driven world, reporting and communicating data insights play a vital role in decision-making processes. However, manual updates and formatting can be time-consuming introduce a plethora of errors. By adopting reproducible practices, you can save time, increase efficiency, and ensure the accuracy of your reports. Our learning outcomes for this post include the following:\n\n- Learn how to use Quarto documents within the RStudio environment.\n- Learn how to load in TidyTuesday data using a dedicated R package.\n- Learn how to make basic visualizations and maps.\n\n### What is Quarto?\n\n[Quarto](https://quarto.org/) is an open-source document framework built for reproducibility. It integrates seamlessly with RStudio, allowing you to combine code, text, and visualizations in a single document or project (like this website :smile). With Quarto, you can automate the process of report generation, making it easier to update and reproduce documents as your data or analysis changes.\n\n### Data Sources\n\nThe data set we will be working with in this post was discovered through the [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday) data visualization challenge. Specifically, we will focus on bird feeder visitation data from the [Project FeederWatch](https://feederwatch.org/). This is a Cornell Lab of Ornithology initiative that utilizes data submitted by citizen scientists across the United States.\n\n## Workflow\n\nTo demonstrate how Quarto can streamline your reporting workflow, let's work with birdfeeder visitation data from FeederWatch. We will parameterize our reports to automatically update based on different filters or date ranges.\n\nHere's the R code to get started:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Birds!\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# Data\nbirds <- tidytuesdayR::tt_load(x = \"2023-01-10\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Compiling #TidyTuesday Information for 2023-01-10 ----\n--- There are 2 files available ---\n--- Starting Download ---\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDownloading file 1 of 2: `PFW_2021_public.csv`\n\tDownloading file 2 of 2: `PFW_count_site_data_public_2021.csv`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Download complete ---\n```\n:::\n:::\n\n\n\n```r\n# Step 1: Install and load necessary packages\ninstall.packages(\"quarto\")\nlibrary(quarto)\n\n# Step 2: Load birdfeeder visitation data\ndata <- read.csv(\"birdfeeder_data.csv\")\n\n# Step 3: Parameterize your report\nreport_title <- \"Birdfeeder Visitation Report\"\ndate_range <- c(\"2023-01-01\", \"2023-06-30\")\n\n# Step 4: Create a Quarto document\nquarto_document(\"birdfeeder_report.Rmd\",\n  title = report_title,\n  params = list(date_range = date_range),\n  output = \"birdfeeder_report.html\"\n) %>%\n  quarto_chunk() %>%\n  quarto_code(\"library(ggplot2)\") %>%\n  quarto_chunk() %>%\n  quarto_code(\"filtered_data <- subset(data, Date >= date_range[1] & Date <= date_range[2])\") %>%\n  quarto_chunk() %>%\n  quarto_code(\"ggplot(filtered_data, aes(x = Date, y = Visits)) + geom_line()\") %>%\n  quarto_chunk() %>%\n  quarto_code(\"ggsave('birdfeeder_plot.png')\")\n```\n\nIn the code above, we start by installing and loading the quarto package. Then, we load the birdfeeder visitation data from a CSV file. Next, we define the parameters for our report, such as the report title and the desired date range for filtering the data.\n\nWe create a Quarto document using the quarto_document() function, specifying the input R Markdown file, report title, parameter list, and desired output format (in this case, HTML). We then use the quarto_chunk() and quarto_code() functions to add code chunks to our document.\n\nThe code chunks contain R code for filtering the data based on the specified date range and creating a line plot using ggplot2. Finally, we save the generated plot as a PNG file using ggsave().\n\n## In Conclusion\n\nBy leveraging Quarto and its capabilities for reproducible reporting, you can transform your reporting workflow from manual and error-prone to automated and efficient. Parameterizing reports allows you to easily update and regenerate them based on changing data or analysis requirements.\n\nReproducible documents not only save time but also enhance collaboration and ensure the accuracy and integrity of your reports. Give Quarto a try in the RStudio environment and experience the power of streamlining your reporting workflow.\n\nStart producing reproducible documents today and say goodbye to the hassles of manual report updates!\n\nHappy reporting with Quarto!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}