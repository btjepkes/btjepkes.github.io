{
  "hash": "a8a216a77d7ae9bf1a309907e8538b6d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Weekly Work Commitments Calendar\"\nabstract: \"Visualizing my work hours for an exhausting 2021.\"\ncategories:\n  - Data Gallery\nimage: img-calendar.jpeg\nimage-alt: \"A calendar displaying work commitments for 2021, highlighting important dates and events.\"\ndate: 10/23/2023\ndescription: \"This visualization, based on the elequent code example from [Tanya Shapiro](https://tanyaviz.com/), shows the distribution of my work weeks in 2021 as reported on my timesheet. Production was completed in RStudio using a custom calendar function.\"\n---\n\n\n![Credit: Benjamin Tjepkes](img-calendar.jpeg)\n\n\n## Tools & Workflow\n\nThe data for this visual were originally stored in an Excel spreadsheet that was then brought into the R environment via RStudio. Below is the entire script used for this visualization. My base code (particularly the `get_calendar` function) was based on the work of [Tanya Shapiro](https://tanyaviz.com/). The entire script is available below.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# LOAD PACKAGES ====\n\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(lubridate)\n\n# LOAD DATA & WRANGLE ====\n\nHourTracker_Tjepkes <- read_excel(\"HourTracker_Tjepkes.xlsx\", \n                                  sheet = \"Sheet2\", col_types = c(\"date\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\",  \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\", \"numeric\"))\n\n\nHourTracker <- HourTracker_Tjepkes %>% \n  select(Date, `Total Hours`)\n\nHourTracker$Date <- ymd(HourTracker$Date)\n\n\nHourTracker_clean <- HourTracker %>% \n  mutate(Description = case_when(`Total Hours` == 0 ~ \"Day Off\",\n                                  `Total Hours` > 8 ~ \"Long Day\",\n                                 `Total Hours` == 8 ~ \"Normal Day\",\n                                 `Total Hours` < 8 ~ \"Short Day\"))\n\nunique_desc <- HourTracker_clean %>% \n                  distinct(Description) %>% \n                  pull(Description)\n\nHourTracker_clean$Description <-factor(HourTracker_clean$Description,\n                                       levels = unique_desc)\n\n\n# CALENDAR FUNCTION ====\n\nget_calendar <- function(start_date, end_date) {\n  n_days <- interval(start_date,end_date)/days(1)\n  date<-start_date + days(0:n_days)\n  month_name<-format(date,\"%B\")\n  month_num<-format(date,\"%m\")\n  year<-format(date,\"%Y\")\n  day_num<-format(date,'%d')\n  day<-wday(date, label=TRUE)\n  week_num<-strftime(date, format = \"%V\")\n  cal<-data.frame(date, year, month_name, month_num, day_num, day, week_num)\n  cal[cal$week_num>=52 & cal$month_num==\"01\",\"week_num\"]=00\n  \n  week_month<-cal%>% \n    group_by(year,month_name, week_num)%>%\n    summarise()%>%\n    mutate(week_month_num=row_number())\n  \n  cal<-merge(cal, week_month, by=c(\"month_name\"=\"month_name\",\"week_num\"=\"week_num\",\"year\"=\"year\"))\n  cal$month_name<-factor(cal$month_name, levels=c(\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"))\n  cal$day<-factor(cal$day, levels=c(\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"))\n  \n  return(cal)\n  \n}\n\n## create date range\nstart_date <- as.Date('2021-01-01')\nend_date <- as.Date('2021-12-31')\n\n## create calendar\ncal<-get_calendar(start_date,end_date)\n\ncal %>% View()\n\n\n# JOIN CALENDAR & HOUR DATA ====\n\nHourTracker_ForPlot <- left_join(cal,\n                                 HourTracker_clean,\n                                 by = c(\"date\" = \"Date\"))\n\n# CREATE PLOT\n\n#custom color palette c('#26547c', '#ef476f', '#FFBC1F', '#05C793')\npal<-c('#FFBC1F', 'lightgray', 'lightblue', '#05C793')\n\n#creating the plot\nggplot(HourTracker_ForPlot)+\n  geom_tile(mapping = aes(x = day,\n                          y=week_month_num),\n            fill=NA) +\n  \n  geom_text(mapping = aes(x=day,\n                          y=week_month_num,\n                          label=day_num),\n            color=\"black\") +\n  \n  geom_point(data = HourTracker_ForPlot,\n             mapping=aes(x=day,\n                         y=week_month_num,\n                         color = Description),\n             size = 7.6) +\n  \n  geom_text(data = HourTracker_ForPlot,\n            mapping=aes(x=day,\n                        y=week_month_num,\n                        label=day_num),\n            color=\"black\",\n            nudge_y = 0.04,\n            size = 3.0) +\n  \n  scale_y_reverse() +\n  \n  scale_color_manual(values = pal,\n              guide = guide_legend(title.position  =\"left\",\n                                   title.hjust = 0.5,\n                                    title.vjust = 0.6,\n                                  title=\"Type of Day:\")) +\n\n  \n  scale_x_discrete(position = \"top\") +\n  \n  labs(y=\"\", x= \"\", \n       title = 'My 2021 Work Commitments',\n       subtitle = \"Visualizing my yearly work schedule from January 1, 2021 to December 31, 2021\",\n       caption = \"Created by Benjamin Tjepkes using R/RStudio\") +\n  \n  facet_wrap(~month_name, scales = \"free_x\") +\n  \n  theme(\n    legend.position = \"top\",\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    panel.background = element_blank(),\n    plot.title = element_text(hjust=0.5,\n                              size=22,\n                              face = \"bold\"),\n    plot.subtitle=element_text(hjust = 0.5,\n                               size = 12,\n                               face = \"italic\",\n                               color = \"gray30\"),\n    legend.key = element_blank(),\n    legend.title = element_blank(),\n    legend.background = element_rect(),\n    legend.spacing.x = unit(0.4, 'cm'),\n    legend.text = element_text(margin = unit(c(0,0,0,-0.3), \"cm\")),\n    strip.background = element_rect(fill = '#26547c'),\n    strip.text = element_text(color = \"white\", face = \"bold\", size = 12),\n    axis.text.x = element_text(hjust = 0.5),  # Align x-axis text to the top\n    axis.title.x = element_blank(),  # Remove x-axis title\n    \n    plot.margin= unit(c(0.8,0.8,0.8,0.2), \"cm\")\n  )\n\nggsave(filename = \"calendar2.jpeg\",\n       plot = last_plot(),\n       dpi = \"retina\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}